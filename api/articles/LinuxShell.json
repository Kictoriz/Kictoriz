{"title":"[Linux笔记]Linux中的Shell编程","uid":"964a85ebe235a950388085ceaf99d1fd","slug":"LinuxShell","date":"2023-05-16T07:44:32.000Z","updated":"2023-05-16T08:54:46.965Z","comments":true,"path":"api/articles/LinuxShell.json","keywords":null,"cover":"./images/cover6.png","content":"<h2 id=\"1、shell脚本概述\"><a href=\"#1、shell脚本概述\" class=\"headerlink\" title=\"1、shell脚本概述\"></a>1、shell脚本概述</h2><ul>\n<li>shell脚本(shell script）是利用shell 的功能编写的程序，该程序是纯文本文件，文件中的语句可以是 shell命令，如echo、pwd和 mkdir等，或者是正则表达式、重定向和管道等，也可以是类似高级程序设计语言中的各种流程控制语句，如if条件判断语句和for条件循环语句等，还可以是以“#”开头的注释语句，注释语句在执行过程中将被忽略。</li>\n<li>此外，用户可以在 shell脚本中根据需要自定义变量或函数，以提高程序的复用性和可读性。由于shell脚本的类型很多，为了使用户编写的脚本在各种类型的shell环境下都能运行，shell脚本中的第一行应该为：#!&#x2F;bin&#x2F;bash</li>\n<li>其中，“#!”表示脚本声明，用于告诉系统执行shell 脚本使用的命令行终端解释器。此处表示执行shell 脚本使用的命令行终端解释器为bash。</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\"># 可执行如下命令查看当前系统默认使用的命令行终端解释器。\n[root@localhost ~]# echo $SHELL\n&#x2F;bin&#x2F;bash\n#由以上执行结果可知，RHEL8默认使用的命令行终端解释器为bash。</code></pre>\n\n<h2 id=\"2、创建和执行shell-脚本\"><a href=\"#2、创建和执行shell-脚本\" class=\"headerlink\" title=\"2、创建和执行shell 脚本\"></a>2、创建和执行shell 脚本</h2><h3 id=\"2-1、创建shell脚本\"><a href=\"#2-1、创建shell脚本\" class=\"headerlink\" title=\"2-1、创建shell脚本\"></a>2-1、创建shell脚本</h3><ul>\n<li>通常使用文本编辑器Vim创建shell脚本，创建完成后就可以编写shell脚本了。shell脚本编写完成后，输入“:wq”并按“Enter”键即可保存文件并退出 Vim。</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\"># 在“scripts”目录下创建名为“example7-1.sh”的shell 脚本，用于查看当前工作目录及该目录下所有文件的详细信息。\n[root@localhost~]# mkdir &#x2F;scripts\n[root@localhost~]# cd&#x2F;scripts\n[root@localhost scripts]# vim example7-1.sh\n# 打开“example7-1.sh”文件按“i”键后输入以下内容，然后保存文件并退出 Vim。\n\n#!&#x2F;bin&#x2F;bash\npwd\nls-l</code></pre>\n\n<ul>\n<li>shell脚本名可以是任音的但为了上盖滔÷在进厅人建议沃加“ch”后缀，以表示是一个脚本文件。</li>\n</ul>\n<h3 id=\"2-2、执行shell脚本\"><a href=\"#2-2、执行shell脚本\" class=\"headerlink\" title=\"2-2、执行shell脚本\"></a>2-2、执行shell脚本</h3><ul>\n<li>执行shell 脚本主要有以下两种方式。</li>\n<li>（1)使用bash命令执行shell脚本，其格式如下。</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">bash 脚本名</code></pre>\n\n<ul>\n<li>这种方式无须将shell脚本的权限设置为可执行。该命令也可由“sh脚本名”命令代替。</li>\n<li>(2）直接输入shell脚本所在路径执行shell脚本，该路径可以是绝对路径，也可以是相对路径。例如，在“&#x2F;home”目录下创建了一个名为“demo.sh”的shell脚本，则可以使用如下命令执行该脚本。</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\"># 以绝对路径的方式执行shell脚本\n[root@localhost ~]# &#x2F;home&#x2F;demo.sh\n# 以相对路径的方式执行shell脚本\n[root@localhost~]# cd &#x2F;home\n[root@localhost home]# .&#x2F;demo.sh</code></pre>\n\n<ul>\n<li>直接输入shell脚本所在路径执行shell脚本时，默认情况下会因为权限不足而提示错误信息,此时须将 shell脚本的访问权限设置为可执行。</li>\n</ul>\n<h2 id=\"3、shell变量\"><a href=\"#3、shell变量\" class=\"headerlink\" title=\"3、shell变量\"></a>3、shell变量</h2><h3 id=\"3-1、用户变量\"><a href=\"#3-1、用户变量\" class=\"headerlink\" title=\"3-1、用户变量\"></a>3-1、用户变量</h3><ul>\n<li>用户变量是指由用户自定义的普通变量。变量名由字母、数字、下画线组成，但是不能以数字开头，并且严格区分大小写，如dir与Dir是两个不同的变量名。</li>\n<li>为用户变量赋值的过程也是声明一个变量的过程，用户变量的赋值形式如下。</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">变量名&#x3D;字符串或数字</code></pre>\n\n<ul>\n<li><p>为用户变量赋值后，要想修改变量值，只需重新赋值即可。要想声明一个只读变量，即赋值后不允许再修改，则可以在变量名前添加“readonly” 关键词。要想访问变量值，可以在变量名前添加“$”符号。要想在屏幕上显示变量值，可以使用echo命令。</p>\n</li>\n<li><p>在为用户变量赋值时，等号两边一定不能留空格。当需要将一个包含空格的字符串赋给用户变量时，应用双引号将该字符串括起来。</p>\n</li>\n<li><p>变量名在命名时须遵守命名规则，以免在使用时出现不必要的错误。同样地，每个人在日常生活中也需要遵守有形的规则和无形的规矩，强化自我约束。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\"># 实例：为用户变量赋值并访问和显示变量值。\n[root@localhost ~]# readonly num&#x3D;100\n[root@localhost ~]# num&#x3D;80\nbash: num: 只读变量\n[root@localhost ~]# lcount&#x3D;0\n[root@localhost ~]# echo $lcount\n0\n[root@localhost ~]# name&#x3D;&quot;li dong&quot;\n[root@localhost ~]# echo $name\nli dong</code></pre>\n\n<h3 id=\"3-2、位置变量\"><a href=\"#3-2、位置变量\" class=\"headerlink\" title=\"3-2、位置变量\"></a>3-2、位置变量</h3><ul>\n<li>在Linux操作系统命令行终端执行shel脚本时，脚本名后面可添加多个参数。这些参数可使用位置变量来表示，其中，S1表示第1个参数、s2表示第2个参数，依次类推，Sn表示第n个参数。如图所示：</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">[root@localhost ~]# bash variable.sh one($1) two three($3) four($4) five</code></pre>\n\n<h3 id=\"3-3、内部变量\"><a href=\"#3-3、内部变量\" class=\"headerlink\" title=\"3-3、内部变量\"></a>3-3、内部变量</h3><ul>\n<li>内部变量是Linux操作系统提供的一一种特殊类型的变量，在shell脚本中，内部变量值是不能修改的。使用内部变量可以接收用户输入的参数，更好地满足用户的一些实时需求，从而更加灵活地完成任务。部分内部变量及其含义如下。<ul>\n<li>(1) $#:参数的数量。</li>\n<li>(2)$?:命令执行后的返回值。</li>\n<li>(3) $0: shell脚本名。</li>\n<li>(4) $*:所有参数。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\"># 实例：位置变量和内部变量的使用。\n[root@localhost ~]# vim variable.sh\n#!&#x2F;bin&#x2F;bash\necho ”当前脚本名称为$0&quot;\necho &quot;总共有$#个参数，分别是$*。&quot;\necho &quot;第1个参数为$1，第3个参数为$3，第5个参数为$5。&quot;\n[root@localhost ~]# bash variable.sh one two three four five\n当前脚本名称为variable.sh\n总共有5个参数，分别是one two three four five.\n第1个参数为one,第3个参数为three,第5个参数为five.</code></pre>\n\n\n<h2 id=\"条件测试语句\"><a href=\"#条件测试语句\" class=\"headerlink\" title=\"条件测试语句\"></a>条件测试语句</h2><p>shell脚本中的条件测试语句可以测试条件表达式的值，若它为真,则返回数字0，否则回非0。在shell脚本中，条件测试语句可使用test命令来完成，其语法格式如下。</p>\n<p><strong>test条件表达式</strong></p>\n<p>条件测试语句也可使用判断符号“0”来完成，其语法格式如下。</p>\n<p><strong>[条件表达式]</strong></p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>test命令的使用方法和”[]”基本一致,只是”[]”常用在if语句中。在”[条件表达式格式中]”   [ &amp; ]与条件表达式之间至少有一个空格。</p>\n</div>\n<h3 id=\"文件测试语句\"><a href=\"#文件测试语句\" class=\"headerlink\" title=\"文件测试语句\"></a>文件测试语句</h3><p>文件测试语句用于测试文件是否存在或是否具有某种权限等。常用的文件测试运算符及其含义如表所示。</p>\n<table>\n<tr> <th>运算符</th> <th>含义</th> </tr>\n<tr> <td>-e</td> <td>测试文件是否存在</td></tr>\n<tr> <td>-f</td> <td>测试文件是否为普通文件</td></tr>\n<tr> <td>-d</td> <td>测试文件是否为目录</td></tr>\n<tr> <td>-r</td> <td>测试当前用户对某文件是否具有'可读'权限</td></tr>\n<tr> <td>-w</td> <td>测试当前用户对某文件是否具有'可写'权限</td></tr>\n</table>\n\n<h3 id=\"逻辑测试语句\"><a href=\"#逻辑测试语句\" class=\"headerlink\" title=\"逻辑测试语句\"></a>逻辑测试语句</h3><p>逻辑测试语句用于对条件表达式的值进行逻辑分析。常用的逻辑测试运算符及其含义如表所示。</p>\n<table>\n<tr> <th>运算符</th> <th>含义</th> </tr>\n<tr> <td>&&(逻辑\"与\")</td> <td>当“&&”前面的条件表达式为真时才会执行后面的表达式,两个条件表达式的值同时为真，则返回真:否则为假</td></tr>\n<tr> <td>||(逻辑“或”)</td> <td>当“”前面的条件表达式为假时才会执行后面的表达式。两个条件表达式的值同时为假，则返回假:否则为真</td></tr>\n<tr> <td>!(逻辑“非”)</td> <td>将条件表达式的值取反，即如果之前为真，则将其变为假;之前为假,则将其变为真/td></td></tr>\n\n</table>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>逻辑“非”运算符“!”应放到条件表达式的前面，表示对整个条件表达式的值进反操作。例如,条件表达式“[!$USER&#x3D; root]”不能写为“[SUSER !&#x3D; root ]”,因为表示不等于,尽管执行效果一样,但缺少了逻辑关系。</p></blockquote>\n<h3 id=\"整数比较语句\"><a href=\"#整数比较语句\" class=\"headerlink\" title=\"整数比较语句\"></a>整数比较语句</h3><p>整数比较语句仅是对数字的操作。常用的整数比较运算符及其含义如表所示。</p>\n<table>\n<tr> <th>运算符</th> <th>含义</th> </tr>\n<tr> <td>-eq</td> <td>是否等于</td></tr>\n<tr> <td>-nc</td> <td>是否不等于</td></tr>\n<tr> <td>-gt</td> <td>是否大于</td></tr>\n<tr> <td>-lt</td> <td>是否小于</td></tr>\n<tr> <td>-ge</td> <td>是否大于等于</td></tr>\n<tr> <td>-le</td> <td>是否小于等于</td></tr>\n</table>\n\n<p>示例</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root0localhost ~] # [100-ge 88]\n[root@localhost ~]#echo $?\n0\n[root@localhost ~] I# num&#x3D;512\n[root@localhost ~]#[$num -lt1024 ]5h echo“小于”小于</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>整数比较语句不能将数字与字符串、文件等一起操作。</p></blockquote>\n<h3 id=\"字符串比较语句\"><a href=\"#字符串比较语句\" class=\"headerlink\" title=\"字符串比较语句\"></a>字符串比较语句</h3><p>字符串比较语句用于测试字符串是否为空，或两个字符串是否相同。常用的字符串比较算符及其含义如表所示。</p>\n<table>\n<tr> <th>运算符</th> <th>含义</th> </tr>\n<tr> <td>=</td> <td>测试字符串内容是否相同</td></tr>\n<tr> <td>!=</td> <td>测试字符串内容是否不同</td></tr>\n<tr> <td>-z</td> <td>测试字符串内容是否为空</td></tr>\n<tr> <td>--n</td> <td>测试字符串内容是否不为空</td></tr>\n\n</table>\n\n<h2 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h2><p>if语句是条件判断语句,使用if语句可以根据某些条件执行指定的命令。if语句可分为单分支if语句、双分支往语句和多分支if语句。</p>\n<h3 id=\"单分支if语句\"><a href=\"#单分支if语句\" class=\"headerlink\" title=\"单分支if语句\"></a>单分支if语句</h3><p>单分子if语句由 if,then和fi关键词组成,其语法格式如下:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">if 条件表达式\n\tthen 命令列表\nfi</code></pre>\n\n<ul>\n<li>以上语句的执行过程是，先判断条件表达式的值，如果它为真，则执行hen之后的命令列表；否则结束退出。</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\"># 实例：单分支if语句的应用。\n[root@localhost ~]# vim &#x2F;scripts&#x2F;example7-9.sh\n#!&#x2F;bin&#x2F;bash\nFile&#x3D;&quot;&#x2F;scripts&#x2F;examp1e7-8.sh&quot;        #定义变量\nif [ ! -e $File ] # 判断 “&#x2F;scripts&#x2F;example7-8.sh” 文件是否存在\n\tthen touch $File                 #如果不存在，则创建\nfi</code></pre>\n\n<ul>\n<li>脚本分析：[脚本分析]由于 “scipts&#x2F;exampl-8.sh””文件不存在，则对其取反之后变为存在，此时if条件表达式的值为真，则执行then 之后的命令，即使用touch 命令创建“&#x2F;scripts&#x2F;example7-8.sh” 文件。</li>\n</ul>\n<h3 id=\"5-2、双分支if-语句\"><a href=\"#5-2、双分支if-语句\" class=\"headerlink\" title=\"5-2、双分支if 语句\"></a>5-2、双分支if 语句</h3><ul>\n<li>双分支if语句由if、then、 else 和fi关键词组成，其语法格式如下。</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">if 条件表达式\n\tthen 命令列表\nelse 命令列表\nfi</code></pre>\n\n<ul>\n<li>以上语句的执行过程是，先判断条件表达式的值，如果它为真，则执行then之后的命令列表；否则执行else之后的命令列表。</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\"># 实例：双分支if语句的应用。\n[root@localhost ~]# vim &#x2F;scripts&#x2F;example7-10. sh\n#!&#x2F;bin&#x2F;bash\nFile&#x3D;&quot;&#x2F;scripts&#x2F;example7-8.sh&quot;    #定义变量\n#判断 “&#x2F;scripts&#x2F;example7-8.sh” 文件是否存在\nif [!-e $File]\n\tthen touch $File    #如果不存在，则创建\nelse chmod u+x $File     #如果存在，则赋予其可执行权限\nfi</code></pre>\n\n<ul>\n<li>脚本分析：由于“&#x2F;scripts&#x2F;example7-8.sh”文件已经存在，则对其取反之后变为不存在，此时if 条件表达式的值为假，则执行else 之后的命令，即使用chmod 命令赋予“&#x2F;scripts&#x2F;example7-8.sh”文件可执行权限。</li>\n</ul>\n<h3 id=\"5-3、多分支语句\"><a href=\"#5-3、多分支语句\" class=\"headerlink\" title=\"5-3、多分支语句\"></a>5-3、多分支语句</h3><ul>\n<li>多分支if语句由if、then、 elif、 else 和fi关键词组成，其语法格式如下。</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">if 条件表达式1\n\tthen 命令列表1\nelif 条件表达式2\n\tthen 命令列表2\n... ...\nelse\n\t命令列表n\nfi</code></pre>\n\n<ul>\n<li>以上语句的执行过程是，先判断条件表达式1的值，如果它为真， 则执行命令列表1: 否则，判断条件表达式2的值，如果它为真，则执行命令列表2:依次类推，如果条件表达式的值都为假，则执行命令列表n。</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\"># 多分支if语句的应用。\n[root@localhost ~]# vim &#x2F;scripts&#x2F;example7-11.sh\n#!&#x2F;bin&#x2F;bash\nread -p &quot;请输入成绩: &quot; score\nif [ $score -ge 90 ]        #如果score大于等于90，输出“优”\n\tthen echo &quot;优&quot;\nelif [ $score -ge 80 ]        #如果score大于等于80，输出“良”\n\tthen echo &quot;良&quot;\nelif [ $score -ge 70 ]       #如果score大于等于70，输出“中”\n\tthen echo &quot;及格&quot;\nelse                         #如果score小于60， 输出“不及格”\n\techo &quot;不及格&quot;\nfi</code></pre>\n\n<ul>\n<li>脚本分析：[脚本分析]使用 read命令的“-p”选项从键盘输入成绩“score”的值，然后对其进行判断。因为80小于90,所以if条件表达式的值为假，继续判断。又因为80大于等于80，所以第一个elif条件表达式的值为真，则输出“良”。由于输入55时，所有条件表达式的值都为假，故执行else之后的命令，即输出“不及格”。</li>\n<li>if语句是可嵌套的，也就是说，一个if语句可在其中包含另一个if语句。关键词fi标志着if语句的结束，应与if成对使用。</li>\n</ul>\n<h2 id=\"6、case语句\"><a href=\"#6、case语句\" class=\"headerlink\" title=\"6、case语句\"></a>6、case语句</h2><ul>\n<li>case语句是多分支条件判断语句，由case、in和esac关键词组成，其语法格式如下。</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">case 变量值 in\n模式字符串1)\n\t命令\n\t......\n\t命令;;\n......\n模式字符串n)\n\t命令\n\t......\n\t命令;;\n*)\n\t命令\n\t......\n\t命令;;\nesac</code></pre>\n\n<ul>\n<li>case语句的执行过程是，用给定变量值依次与各模式字符串进行比较，如果与某一个模式字符串匹配，那么就执行该模式字符串之后的命令，直至遇到两个分号为止。如果给定变量值与所有模式字符串都不匹配，则执行“*)”之后的命令。</li>\n<li>在大多数情况下，如果存在很多条件，则可以使用case语句代替if语句。</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\"># 实例：根据指定 省份输出省会\n[root@localhost ~]# vim &#x2F;scripts&#x2F;example7-12. sh \n#!&#x2F;bin&#x2F;bash\ncase $1 in\n\tguangdong)      #如果位置变量值是“guangdong”, 输出“guangzhou&quot;\n\t\techo &quot;guangzhou&quot;;;\n\thenan)          #如果变量值是“henan”, 输出“zhengzhou”\n\t\techo &quot; zhengzhou&quot;;;\n\thubei)          #如果变量值是“hubei&quot;, 输出&quot;wuhan&quot;\n\t\techo &quot;wuhan&quot;;;\n\t*)              #如果变量值是其他字符串，输出“error”\n\t\techo &quot;error&quot;;;\nesac</code></pre>\n\n<ul>\n<li><p>脚本分析：[脚本分析]第一 次执行该脚本时变量值是“hubei”, 它与模式字符串“hubei” 匹配，则执行该模式字符串之后的命令，输出“wuhan”。第二次执行该脚本时变量值是“shan”, 它与所有模式字符串都不匹配，则执行“*)” 之后的命令，输出“error”。</p>\n</li>\n<li><p>在使用case语句时应注意以下两个方面。</p>\n<ul>\n<li>（1）模式字符串中可以使用正则表达式</li>\n<li>如果一个模式字符串中包含多个模式，那么各模式之间必须用竖线（|）隔开，表示各模式之间是“或的关系”，即只要给定变量值与其中一个模式匹配，就会执行该模式字符串之后的命令。</li>\n</ul>\n</li>\n</ul>\n","feature":true,"text":"1、shell脚本概述 shell脚本(shell script）是利用shell 的功能编写的程序，该程序是纯文本文件，文件中的语句可以是 shell命令，如echo、pwd和 mkdir等，或者是正则表达式、重定向和管道等，也可以是类似高级程序设计语言中的各种流程控制语句，如...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","count":10,"path":"api/tags/学习笔记.json"},{"name":"学习","slug":"学习","count":10,"path":"api/tags/学习.json"},{"name":"笔记","slug":"笔记","count":10,"path":"api/tags/笔记.json"},{"name":"Linux","slug":"Linux","count":7,"path":"api/tags/Linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81shell%E8%84%9A%E6%9C%AC%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1、shell脚本概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%88%9B%E5%BB%BA%E5%92%8C%E6%89%A7%E8%A1%8Cshell-%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">2、创建和执行shell 脚本</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1%E3%80%81%E5%88%9B%E5%BB%BAshell%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">2-1、创建shell脚本</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2%E3%80%81%E6%89%A7%E8%A1%8Cshell%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">2-2、执行shell脚本</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81shell%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3、shell变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1%E3%80%81%E7%94%A8%E6%88%B7%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3-1、用户变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2%E3%80%81%E4%BD%8D%E7%BD%AE%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3-2、位置变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3%E3%80%81%E5%86%85%E9%83%A8%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3-3、内部变量</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">条件测试语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">文件测试语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E6%B5%8B%E8%AF%95%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">逻辑测试语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B4%E6%95%B0%E6%AF%94%E8%BE%83%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">整数比较语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">字符串比较语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#if%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">if语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%88%86%E6%94%AFif%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">单分支if语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2%E3%80%81%E5%8F%8C%E5%88%86%E6%94%AFif-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">5-2、双分支if 语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3%E3%80%81%E5%A4%9A%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">5-3、多分支语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81case%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">6、case语句</span></a></li></ol>","author":{"name":"雨中冒险","slug":"blog-author","avatar":"/images/QQ.jpg","link":"/","description":"I'm in love with a shootin' star </br> But she moves so fast when she falls then I'll be waitin'","socials":{"github":"https://github.com/Kictoriz","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"[Linux笔记]操作系统","uid":"2d235e8538176bc190407e7938429ed4","slug":"LinuxCaozuoxitong","date":"2023-04-25T07:00:00.000Z","updated":"2023-05-03T10:27:03.828Z","comments":true,"path":"api/articles/LinuxCaozuoxitong.json","keywords":null,"cover":"./images/cover10.jpg","text":"服务管理与任务定制1、Linux操作系统的启动1-1、修改GRUP的配置 vim &#x2F;etc&#x2F;default&#x2F;grub update-rtub 1-2、Linux操作系统的开机过程 Linux 操作系统的开机过程是，首先 BIOS初始化，然后进入系统引...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","count":10,"path":"api/tags/学习笔记.json"},{"name":"学习","slug":"学习","count":10,"path":"api/tags/学习.json"},{"name":"笔记","slug":"笔记","count":10,"path":"api/tags/笔记.json"},{"name":"Linux","slug":"Linux","count":7,"path":"api/tags/Linux.json"}],"author":{"name":"雨中冒险","slug":"blog-author","avatar":"/images/QQ.jpg","link":"/","description":"I'm in love with a shootin' star </br> But she moves so fast when she falls then I'll be waitin'","socials":{"github":"https://github.com/Kictoriz","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}